import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Client {
    public static void main(String[] args) throws IOException {

        Scanner scanner = new Scanner(System.in);
        int nrQuest = scanner.nextInt();
        scanner.nextLine();

        // * HashMaps usados para armazenar as respostas corretas e a pontuação das
        // * questões, facilitando o cálculo das notas dos alunos.
        Map<Integer, String[]> respostasCorretas = new HashMap<>();
        Map<Integer, Double[]> pontuacaoQuestoes = new HashMap<>();

        // Criação de um arquivo para armazenar as respostas das perguntas.
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("data.txt"))) {
            for (int i = 0; i < nrQuest; i++) {
                String userInput = scanner.nextLine(); 
                Scanner stringScanner = new Scanner(userInput);
                int QuestNr = stringScanner.nextInt();
                writer.write(QuestNr + " "); // Armazena o número da questão
                String QuestType = stringScanner.next();
                writer.write(QuestType + "\n"); // Armazena o tipo de questão
                stringScanner.next();
                stringScanner.close();

                if (QuestType.equals("F")) {
                    int nrOpcoes = 4;
                    String[] respostas = new String[nrOpcoes];
                    Double[] pontuacaoQuestao = new Double[nrOpcoes];

                    for (int j = 0; j < nrOpcoes; j++) {
                        String optionInput = scanner.nextLine();
                        String[] parts = optionInput.split("\\s+");

                        respostas[j] = parts[0];
                        pontuacaoQuestao[j] = Double.parseDouble(parts[2]);

                        // Armazena as letras e pontuações das respostas
                        writer.write(respostas[j] + "\n");
                        writer.write(pontuacaoQuestao[j] + "\n");
                    }
                    // Passa para os hashmaps os seguintes valores
                    respostasCorretas.put(QuestNr, respostas);
                    pontuacaoQuestoes.put(QuestNr, pontuacaoQuestao);
                }

                if (QuestType.equals("A")) {
                    int pontuacaoQuestaoA = scanner.nextInt();
                    writer.write(Integer.toString(pontuacaoQuestaoA) + "\n");
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }

        int nrStudents = scanner.nextInt();
        scanner.nextLine();
        Map<String, Double> studentScores = new HashMap<>();

        for (int i = 0; i < nrStudents; i++) {
            String studentName = scanner.next();
            double pontuacaoAluno = 0.0;
            // * Para avaliar os alunos, é lido o arquivo para comparar as respostas
            // * e aplicar a cotação correta.
            BufferedReader reader = new BufferedReader(new FileReader("data.txt"));

            // São 4 alíneas para cada pergunta
            for (int j = 0; j < 4; j++) {
                int studentQuestNr = scanner.nextInt();
                String studentQuestLetter = scanner.next();

                // 3 respostas fechadas
                if (studentQuestNr >= 1 && studentQuestNr <= 3) {
                    
                    // * Organização das respostas do teste, de 8 em 8 linhas 
                    // * estão armazenadas as respostas e suas cotações, começando
                    // * pela linha 2.
                    int startLine = (studentQuestNr - 1) * 8 + 2;
                    int endLine = (studentQuestNr - 1) * 8 + 9;

                    for (int n = startLine; n <= endLine; n++) {
                        
                        String currentLine = reader.readLine();

                        // Se o valor for null, "-", a pontuação não se altera
                        if (currentLine == null) {
                            pontuacaoAluno += 0;
                            break;
                        }

                        // * Compara a resposta do aluno com a resposta armazenada do
                        // * teste e lê a linha imediatamente a seguir aonde está
                        // * a sua cotação e a soma á nota final do aluno.
                        if (currentLine.trim().equals(studentQuestLetter)) {
                            double pontuacaoQuestao = Double.parseDouble(reader.readLine());
                            pontuacaoAluno += pontuacaoQuestao;
                            break;
                        }
                    }
                }
                
                // 1 resposta aberta
                else if (studentQuestNr == 4 && (studentQuestLetter.equals("1") || studentQuestLetter.equals("2"))) {
                    pontuacaoAluno += 2.0;
                }
            }
            studentScores.put(studentName, pontuacaoAluno);
            reader.close();
        }

        // Imprime a nota de todos os alunos.
        for (Map.Entry<String, Double> entry : studentScores.entrySet()) {
            System.out.println("Nota de " + entry.getKey() + ": " + entry.getValue());
        }

        scanner.close();
    }
}

    /*
        // TODO - Parte IV - Avaliação alunos
        int nrAlunos = scanner.nextInt();
        scanner.nextLine(); // Consumir a quebra de linha após o número de alunos
        Map<String, Double> studentScores2 = new HashMap<>();

        for (int i = 0; i < nrAlunos; i++) {
            String name = scanner.nextLine();
            double score = 0.0;

            try (BufferedReader reader = new BufferedReader(new FileReader("data_2.txt"))) {
                for (int j = 0; j < 2; j++) {
                    int studentQuestNr = Integer.parseInt(scanner.nextLine());
                    String studentQuestOption = scanner.nextLine();
                    String trueFalse = scanner.nextLine();
                    Double questScore = Double.parseDouble(scanner.nextLine());

                    int startLine = (studentQuestNr - 1) * 6 - 4;
                    int endLine = (studentQuestNr - 1) * 6 + 1;
                    
                    for (int n = startLine; n <= endLine; n++) {
                        String currentLine = reader.readLine();
                        if (currentLine != null && currentLine.trim().equals(studentQuestOption)) {
                            double pontuacaoQuestao = Double.parseDouble(reader.readLine());
                            score += pontuacaoQuestao;
                            break;
                        }
                    }
                }
            } catch (IOException | NumberFormatException e) {
                e.printStackTrace();
            }

            studentScores2.put(name, score);
        }



// Mostra a nota de todos os alunos
for (Map.Entry<String, Double> entry : studentScores2.entrySet()) {
    System.out.println("Nota de " + entry.getKey() + ": " + entry.getValue());
}

// Aqui você tem o Map 'studentScores2' que contém as notas calculadas dos alunos.
// Utilize conforme necessário.
        
    /*
    // TODO Parte V - Armazenar respostas das perguntas de múltipla escolha (5 opções) no arquivo "data.txt"
    try {
        BufferedWriter writer3 = new BufferedWriter(new FileWriter("data_3.txt")); // Append true para acrescentar ao arquivo existente

        int nrQuest4 = scanner.nextInt();
        scanner.nextLine();

        for (int i = 0; i < nrQuest4; i++) {
            int QuestNr = scanner.nextInt();
            writer3.write(QuestNr + "\n");
            scanner.nextLine(); // Limpar o buffer

            String question = scanner.nextLine().trim();

            int numOptions = 5;

            for (int j = 0; j < numOptions; j++) {
                String option = scanner.nextLine();
                writer3.write(option + "\n");
                String trueFalse = scanner.nextLine();
                writer3.write(trueFalse + "\n");
                Double score = Double.parseDouble(scanner.nextLine());
                writer3.write(score + "\n");
            }
        }
        writer3.close(); // Fechar o arquivo
    } catch (NumberFormatException e) {
        e.printStackTrace();
    }
    */
